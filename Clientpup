#include <iostream>
#include <string>
#include <Windows.h>
#include <wininet.h>

#pragma comment(lib, "wininet.lib")

HANDLE hPipe; // Declare the named pipe handle globally


void SetConsoleSize(int width, int height) {
    HWND console = GetConsoleWindow();
    RECT rect;
    GetWindowRect(console, &rect);

    MoveWindow(console, rect.left, rect.top, width, height, TRUE);
}

void ConnectToNamedPipe() {
    // Connect to named pipe server
    hPipe = CreateFile(
        L"\\\\.\\pipe\\MyNamedPipe",
        GENERIC_READ | GENERIC_WRITE,
        0,
        NULL,
        OPEN_EXISTING,
        0,
        NULL);

    if (hPipe == INVALID_HANDLE_VALUE) {
        std::cerr << "Failed to connect to named pipe server" << std::endl;
        exit(1);
    }
}


void HandlePasswordCommand() {
    std::string password;
    std::cout << "Enter password: ";
    std::cin >> password;

    // Send password to server
    DWORD bytesWritten;
    WriteFile(hPipe, password.c_str(), password.size(), &bytesWritten, NULL);

    // Response handling (if any)
}


void HandleBiometricCommand() {
    // Send command to server
    DWORD bytesWritten;
    std::string input = "b";
    WriteFile(hPipe, input.c_str(), input.size(), &bytesWritten, NULL);

    // Response handling (if any)
}

void HandleLocking() {
    // Send command to server
    DWORD bytesWritten;
    std::string input = "l";
    WriteFile(hPipe, input.c_str(), input.size(), &bytesWritten, NULL);

    // Response handling (if any)
}

int main() {
    // Set console size to be square
    SetConsoleSize(600, 600);

    ConnectToNamedPipe(); // Connect to named pipe server

    std::string input;

    while (true) {
        std::cout << "Commands:\n";
        std::cout << "p - for password\n";
        std::cout << "b - for biometric\n";
        std::cout << "l - to lock the the folder\n";
        std::cout << "Enter command: ";
        std::cin >> input;

        if (input == "p") {
            HandlePasswordCommand();
        }
        else if (input == "b") {
            HandleBiometricCommand();
        }
        else if (input == "l" ) {
            HandleLocking();

        }
        else if (input == "commands" || input == "command") {
            continue;
        }
        else {
            std::cout << "Invalid command. Please try again." << std::endl;
            continue;
        }

        std::string moreCommands;
        std::cout << "Do you want to enter more commands? (yes/no): ";
        std::cin >> moreCommands;

        if (moreCommands != "yes") {
            break;
        }
    }

    CloseHandle(hPipe); // Close the named pipe handle
    return 0;
}
